buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        google()
        jcenter()
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
        classpath "org.jacoco:org.jacoco.core:0.8.5"
        classpath 'org.robolectric:robolectric:4.3.1'
    }
}

plugins {
    id "jacoco"
    id "org.sonarqube" version "2.8"
}

apply plugin: 'com.android.application'
apply plugin: "org.sonarqube"
apply plugin: 'jacoco'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:8.6.0-beta.1'
    implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-locationlayer:0.11.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test:rules:1.3.0-alpha03'
    testImplementation 'org.robolectric:robolectric:4.3.1'
}

sonarqube {
    properties {
        property "sonar.exclusions", "**/*Generated.java"
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.example.m2app"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFile 'proguard-rules.txt'
            debuggable true
            testCoverageEnabled = true
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    jacoco {
        version "0.8.5"
    }
}

/*
def coverageSourceDirs = [
        '../app/src/main/java'
]
task jacocoTestReport(type:JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**//*R.class',
'**//*R$*.class',
'**//**$ViewInjector*.*',
'**//*BuildConfig.*',
'**//*Manifest*.*']
)

additionalSourceDirs = getExecutionData().from(coverageSourceDirs)
sourceDirectories = getExecutionData().from(coverageSourceDirs)
executionData = getExecutionData().from('../app/build/jacoco/testDebug.exec')

reports {
    xml.enabled = true
    html.enabled = true
}

}

*/